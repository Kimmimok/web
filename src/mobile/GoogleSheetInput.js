import React, { useState } from 'react';
import '../MobileBookingForm.css';
import ReservationForm from './services/ReservationForm';
import CruiseBookingForm from './services/CruiseBookingForm';
import CarServiceForm from './services/CarServiceForm';
import AirportServiceForm from './services/AirportServiceForm';
import TourServiceForm from './services/TourServiceForm';
import HotelServiceForm from './services/HotelServiceForm';
import RentalCarServiceForm from './services/RentalCarServiceForm';

const SHEET_ID = '16bKsWL_0HkZeAbOVVntSz0ehUHRGO1PoanNhFLghvEo';
const API_KEY = 'AIzaSyDyfByYamh-s9972-ZeVr_Fyq64jH1snrw';

function MobileBookingForm() {
  const [currentStep, setCurrentStep] = useState(0);
  const [selectedService, setSelectedService] = useState('');
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    customerName: '',
    email: '',
    phone: '',
    checkInDate: '',
    checkOutDate: '',
    adults: 1,
    children: 0,
    specialRequests: '',
    serviceSpecific: {}
  });
  // SH_R ÏãúÌä∏ Ïª¨ÎüºÎ™Ö fetch Ìï®Ïàò
  const [shrHeaders, setShrHeaders] = useState([]);
  React.useEffect(() => {
    async function fetchHeaders() {
      if (selectedService === 'SH_C') {
        const res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/SH_R!1:1?key=${API_KEY}`);
        const data = await res.json();
        setShrHeaders(data.values ? data.values[0] : []);
      }
    }
    fetchHeaders();
  }, [selectedService]);

  // SH_C ÏãúÌä∏ Ïª¨ÎüºÎ™Ö fetch Ìï®Ïàò (Ï∞®ÎüâÏÑúÎπÑÏä§Ïö©)
  const [shcHeaders, setShcHeaders] = useState([]);
  React.useEffect(() => {
    async function fetchHeaders() {
      if (selectedService === 'SH_CC') {
        const res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/SH_C!1:1?key=${API_KEY}`);
        const data = await res.json();
        setShcHeaders(data.values ? data.values[0] : []);
      }
    }
    fetchHeaders();
  }, [selectedService]);

  const services = [
    { id: 'SH_R', name: 'ÏòàÏïΩÏûê Ï†ïÎ≥¥', icon: 'üë§', color: '#10B981' },
    { id: 'SH_C', name: 'ÌÅ¨Î£®Ï¶à ÏòàÏïΩ', icon: 'üö¢', color: '#059669' },
    { id: 'SH_CC', name: 'Ï∞®Îüâ ÏÑúÎπÑÏä§', icon: 'üöó', color: '#DC2626' },
    { id: 'SH_P', name: 'Í≥µÌï≠ ÏÑúÎπÑÏä§', icon: '‚úàÔ∏è', color: '#7C2D12' },
    { id: 'SH_T', name: 'Ìà¨Ïñ¥ ÏòàÏïΩ', icon: 'üó∫Ô∏è', color: '#9333EA' },
    { id: 'SH_H', name: 'Ìò∏ÌÖî ÏòàÏïΩ', icon: 'üè©', color: '#DB2777' },
    { id: 'SH_RC', name: 'Î†åÌä∏Ïπ¥ ÏòàÏïΩ', icon: 'üöô', color: '#EA580C' }
  ];

  const steps = [
    { title: 'ÏÑúÎπÑÏä§ ÏÑ†ÌÉù', icon: 'üîç' },
    { title: 'Í≥†Í∞ù Ï†ïÎ≥¥', icon: 'üë§' },
    { title: 'ÏòàÏïΩ Ï†ïÎ≥¥', icon: 'üìÖ' },
    { title: 'Ï∂îÍ∞Ä Ï†ïÎ≥¥', icon: 'üìù' },
    { title: 'ÌôïÏù∏', icon: '‚úÖ' }
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleServiceSpecificChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      serviceSpecific: { ...prev.serviceSpecific, [field]: value }
    }));
  };

  const submitBooking = async () => {
    setLoading(true);
    try {
      // SH_M ÏãúÌä∏Ïóê Ï†ÄÏû•Ìï† Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
      const rowData = [
        formData.orderId,
        formData.regDate,
        formData.email,
        formData.koreanName,
        formData.englishName,
        formData.nickname
      ];
      // Google Sheets API Ï†ÑÏÜ° ÏòàÏãú (fetch ÏÇ¨Ïö©)
      await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/SH_M!A1:append?valueInputOption=USER_ENTERED&key=${API_KEY}`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ values: [rowData] })
        }
      );
      alert(`ÏòàÏïΩÏù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§!\nÏ£ºÎ¨∏ID: ${formData.orderId}`);
      setFormData({
        orderId: '',
        regDate: '',
        email: '',
        koreanName: '',
        englishName: '',
        nickname: ''
      });
      setCurrentStep(0);
      setSelectedService('');
    } catch (error) {
      alert('ÏòàÏïΩ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const isStepValid = () => {
    switch (currentStep) {
      case 0: return selectedService !== '';
      case 1: return formData.customerName && formData.email && formData.phone;
      case 2: return formData.checkInDate && formData.checkOutDate;
      default: return true;
    }
  };

  // Î™®Îì† ÏãúÌä∏Ïùò ID ÏûêÎèôÏÉùÏÑ± Î∞è Ï£ºÎ¨∏ID ÏûêÎèôÏûÖÎ†• Í≥µÌÜµ Ìï®Ïàò
  const fetchOrderIds = async (sheetName) => {
    const res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${sheetName}!A:A?key=${API_KEY}`);
    const data = await res.json();
    return (data.values || []).map(row => row[0]);
  };

  const generateUniqueId = async (sheetName) => {
    const existingIds = await fetchOrderIds(sheetName);
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let newId = '';
    let tries = 0;
    do {
      newId = '';
      for (let i = 0; i < 8; i++) {
        newId += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      tries++;
      if (tries > 100) throw new Error('ID ÏÉùÏÑ± Ïã§Ìå®: Ï§ëÎ≥µ ÌöåÌîº Î∂àÍ∞Ä');
    } while (existingIds.includes(newId));
    return newId;
  };

  // Ï£ºÎ¨∏ID ÏûêÎèôÏûÖÎ†• (ÏÇ¨Ïö©Ïûê Ï£ºÎ¨∏ID Î∂àÎü¨Ïò§Í∏∞)
  const fetchUserOrderId = async (userEmail) => {
    // ÏòàÏãú: SH_M ÏãúÌä∏ÏóêÏÑú Ìï¥Îãπ Ïù¥Î©îÏùºÏùò Ï£ºÎ¨∏ID Ï°∞Ìöå
    const res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/SH_M!A:F?key=${API_KEY}`);
    const data = await res.json();
    if (!data.values) return '';
    const header = data.values[0];
    const orderIdIdx = header.indexOf('Ï£ºÎ¨∏ID');
    const emailIdx = header.indexOf('Email');
    const found = data.values.find(row => row[emailIdx] === userEmail);
    return found ? found[orderIdIdx] : '';
  };

  // Ìèº Ï¥àÍ∏∞Ìôî Ïãú Í∞Å ÏãúÌä∏Ïùò ID, Ï£ºÎ¨∏ID ÏûêÎèô ÏûÖÎ†• (Í≥µÌÜµ Ï†ÅÏö©)
  React.useEffect(() => {
    async function setAutoIds() {
      if (currentStep === 1 && selectedService) {
        const sheetName = selectedService;
        const uniqueId = await generateUniqueId(sheetName);
        let userOrderId = '';
        if (formData.email) {
          userOrderId = await fetchUserOrderId(formData.email);
        }
        setFormData(prev => ({
          ...prev,
          id: uniqueId,
          orderId: userOrderId
        }));
      }
    }
    setAutoIds();
  }, [currentStep, selectedService, formData.email]);

  return (
    <div className="mobile-booking-form">
      <div className="form-content">
        {currentStep === 0 && (
          <div className="service-selection">
            <h2 className="step-title">ÏòàÏïΩ ÏÑúÎπÑÏä§Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</h2>
            <div className="services-grid">
              {services.map(service => (
                <div
                  key={service.id}
                  className={`service-card ${selectedService === service.id ? 'selected' : ''}`}
                  onClick={() => {
                    setSelectedService(service.id);
                    setCurrentStep(1);
                  }}
                  style={{ '--service-color': service.color }}
                >
                  <div className="service-icon">{service.icon}</div>
                  <div className="service-name">{service.name}</div>
                </div>
              ))}
            </div>
          </div>
        )}

        {currentStep === 1 && selectedService === 'SH_R' && (
          <ReservationForm formData={formData} setFormData={setFormData} />
        )}
        {currentStep === 1 && selectedService === 'SH_C' && (
          <CruiseBookingForm formData={formData} setFormData={setFormData} />
        )}
        {currentStep === 1 && selectedService === 'SH_CC' && (
          <CarServiceForm formData={formData} setFormData={setFormData} />
        )}
        {currentStep === 1 && selectedService === 'SH_P' && (
          <AirportServiceForm formData={formData} setFormData={setFormData} />
        )}
        {currentStep === 1 && selectedService === 'SH_T' && (
          <TourServiceForm formData={formData} setFormData={setFormData} />
        )}
        {currentStep === 1 && selectedService === 'SH_H' && (
          <HotelServiceForm formData={formData} setFormData={setFormData} />
        )}
        {currentStep === 1 && selectedService === 'SH_RC' && (
          <RentalCarServiceForm formData={formData} setFormData={setFormData} />
        )}

        {currentStep === 2 && (
          <div className="booking-info">
            <h2 className="step-title">ÏòàÏïΩ Ï†ïÎ≥¥Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h2>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="checkInDate">Ï≤¥ÌÅ¨Ïù∏ ÎÇ†Ïßú *</label>
                <input type="date" id="checkInDate" value={formData.checkInDate}
                  onChange={(e) => handleInputChange('checkInDate', e.target.value)}
                  min={new Date().toISOString().split('T')[0]} required />
              </div>
              <div className="form-group">
                <label htmlFor="checkOutDate">Ï≤¥ÌÅ¨ÏïÑÏõÉ ÎÇ†Ïßú *</label>
                <input type="date" id="checkOutDate" value={formData.checkOutDate}
                  onChange={(e) => handleInputChange('checkOutDate', e.target.value)}
                  min={formData.checkInDate || new Date().toISOString().split('T')[0]} required />
              </div>
            </div>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="adults">ÏÑ±Ïù∏</label>
                <select id="adults" value={formData.adults} onChange={(e) => handleInputChange('adults', parseInt(e.target.value))}>
                  {[1,2,3,4,5,6].map(num => <option key={num} value={num}>{num}Î™Ö</option>)}
                </select>
              </div>
              <div className="form-group">
                <label htmlFor="children">ÏïÑÎèô</label>
                <select id="children" value={formData.children} onChange={(e) => handleInputChange('children', parseInt(e.target.value))}>
                  {[0,1,2,3,4].map(num => <option key={num} value={num}>{num}Î™Ö</option>)}
                </select>
              </div>
            </div>
          </div>
        )}

        {currentStep === 3 && (
          <div className="service-specific">
            <h2 className="step-title">{services.find(s => s.id === selectedService)?.name} Ï∂îÍ∞Ä Ï†ïÎ≥¥</h2>
            <div className="form-group">
              <label htmlFor="specialRequests">ÌäπÎ≥Ñ ÏöîÏ≤≠ÏÇ¨Ìï≠</label>
              <textarea id="specialRequests" value={formData.specialRequests}
                onChange={(e) => handleInputChange('specialRequests', e.target.value)}
                placeholder="Ï∂îÍ∞Ä ÏöîÏ≤≠ÏÇ¨Ìï≠Ïù¥ÎÇò ÌäπÎ≥ÑÌïú ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî" rows="3" />
            </div>
          </div>
        )}

        {currentStep === 4 && (
          <div className="confirmation">
            <h2 className="step-title">ÏòàÏïΩ Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî</h2>
            <div className="confirmation-card">
              <div className="confirmation-section">
                <h3>ÏÑúÎπÑÏä§ Ï†ïÎ≥¥</h3>
                <div className="confirmation-item">
                  <span className="service-badge" style={{ backgroundColor: services.find(s => s.id === selectedService)?.color }}>
                    {services.find(s => s.id === selectedService)?.icon} {services.find(s => s.id === selectedService)?.name}
                  </span>
                </div>
              </div>
              <div className="confirmation-section">
                <h3>Í≥†Í∞ù Ï†ïÎ≥¥</h3>
                <div className="confirmation-item">
                  <span className="label">ÏÑ±Ìï®:</span><span className="value">{formData.customerName}</span>
                </div>
                <div className="confirmation-item">
                  <span className="label">Ïù¥Î©îÏùº:</span><span className="value">{formData.email}</span>
                </div>
                <div className="confirmation-item">
                  <span className="label">Ïó∞ÎùΩÏ≤ò:</span><span className="value">{formData.phone}</span>
                </div>
              </div>
              <div className="confirmation-section">
                <h3>ÏòàÏïΩ Ï†ïÎ≥¥</h3>
                <div className="confirmation-item">
                  <span className="label">Ï≤¥ÌÅ¨Ïù∏:</span><span className="value">{formData.checkInDate}</span>
                </div>
                <div className="confirmation-item">
                  <span className="label">Ï≤¥ÌÅ¨ÏïÑÏõÉ:</span><span className="value">{formData.checkOutDate}</span>
                </div>
                <div className="confirmation-item">
                  <span className="label">Ïù∏Ïõê:</span><span className="value">ÏÑ±Ïù∏ {formData.adults}Î™Ö, ÏïÑÎèô {formData.children}Î™Ö</span>
                </div>
              </div>
              {formData.specialRequests && (
                <div className="confirmation-section">
                  <h3>ÌäπÎ≥Ñ ÏöîÏ≤≠ÏÇ¨Ìï≠</h3>
                  <div className="special-requests">{formData.specialRequests}</div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner"></div>
          <div className="loading-text">ÏòàÏïΩÏùÑ Ï≤òÎ¶¨ÌïòÍ≥† ÏûàÏäµÎãàÎã§...</div>
        </div>
      )}
    </div>
  );
}

export default MobileBookingForm;
